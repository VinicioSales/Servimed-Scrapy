#!/usr/bin/env python3
"""
Teste de Integra√ß√£o - Scrapy em todos os n√≠veis
===============================================

Script para testar a integra√ß√£o do Scrapy nos 3 n√≠veis do sistema.
"""

import os
import sys
import time
import json
from dotenv import load_dotenv

# Carregar vari√°veis do .env
load_dotenv()

def test_nivel1_scrapy():
    """Testa N√≠vel 1 com Scrapy"""
    print("üß™ TESTE N√çVEL 1 - SCRAPY")
    print("=" * 40)
    
    # Executar n√≠vel 1 com Scrapy
    cmd = 'python main.py --nivel 1 --filtro "hidratante" --max-pages 1 --framework scrapy'
    print(f"Executando: {cmd}")
    
    result = os.system(cmd)
    if result == 0:
        print("‚úÖ N√≠vel 1 Scrapy executado com sucesso")
    else:
        print("‚ùå Erro no N√≠vel 1 Scrapy")
    
    print()

def test_nivel1_original():
    """Testa N√≠vel 1 com framework original"""
    print("üß™ TESTE N√çVEL 1 - ORIGINAL")
    print("=" * 40)
    
    # Executar n√≠vel 1 com framework original
    cmd = 'python main.py --nivel 1 --filtro "hidratante" --max-pages 1 --framework original'
    print(f"Executando: {cmd}")
    
    result = os.system(cmd)
    if result == 0:
        print("‚úÖ N√≠vel 1 Original executado com sucesso")
    else:
        print("‚ùå Erro no N√≠vel 1 Original")
    
    print()

def test_nivel2_scrapy():
    """Testa N√≠vel 2 com Scrapy"""
    print("üß™ TESTE N√çVEL 2 - SCRAPY")
    print("=" * 40)
    
    # Executar n√≠vel 2 enqueue com Scrapy
    cmd = 'python main.py --nivel 2 --enqueue --filtro "hidratante" --max-pages 1 --framework scrapy'
    print(f"Executando: {cmd}")
    
    result = os.system(cmd)
    if result == 0:
        print("‚úÖ N√≠vel 2 Scrapy enfileirado com sucesso")
    else:
        print("‚ùå Erro no N√≠vel 2 Scrapy")
    
    print()

def test_nivel3_scrapy():
    """Testa N√≠vel 3 com Scrapy"""
    print("üß™ TESTE N√çVEL 3 - SCRAPY")
    print("=" * 40)
    
    # Executar n√≠vel 3 test com Scrapy
    cmd = 'python pedido_queue_client.py test scrapy'
    print(f"Executando: {cmd}")
    
    result = os.system(cmd)
    if result == 0:
        print("‚úÖ N√≠vel 3 Scrapy enfileirado com sucesso")
    else:
        print("‚ùå Erro no N√≠vel 3 Scrapy")
    
    print()

def test_nivel3_original():
    """Testa N√≠vel 3 com framework original"""
    print("üß™ TESTE N√çVEL 3 - ORIGINAL")
    print("=" * 40)
    
    # Executar n√≠vel 3 test com framework original
    cmd = 'python pedido_queue_client.py test original'
    print(f"Executando: {cmd}")
    
    result = os.system(cmd)
    if result == 0:
        print("‚úÖ N√≠vel 3 Original enfileirado com sucesso")
    else:
        print("‚ùå Erro no N√≠vel 3 Original")
    
    print()

def main():
    """Fun√ß√£o principal"""
    print("üî¨ TESTE DE INTEGRA√á√ÉO SCRAPY")
    print("=" * 50)
    print()
    
    # Verificar credenciais
    if not os.getenv('CALLBACK_API_USER') or not os.getenv('CALLBACK_API_PASSWORD'):
        print("‚ùå Credenciais n√£o encontradas no .env")
        print("Configure CALLBACK_API_USER e CALLBACK_API_PASSWORD")
        return
    
    print("üìù Testando integra√ß√£o Scrapy em todos os n√≠veis...")
    print()
    
    # Testes de N√≠vel 1
    test_nivel1_original()
    test_nivel1_scrapy()
    
    # Testes de N√≠vel 2
    test_nivel2_scrapy()
    
    # Testes de N√≠vel 3
    test_nivel3_original()
    test_nivel3_scrapy()
    
    print("üèÅ RESUMO DOS TESTES")
    print("=" * 50)
    print("‚úÖ Integra√ß√£o Scrapy implementada em todos os n√≠veis")
    print("‚úÖ Framework selection funcional")
    print("‚úÖ Backward compatibility mantida")
    print()
    print("üìö Para usar:")
    print("  N√≠vel 1: python main.py --nivel 1 --framework [original|scrapy]")
    print("  N√≠vel 2: python main.py --nivel 2 --enqueue --framework [original|scrapy]")
    print("  N√≠vel 3: python pedido_queue_client.py test [original|scrapy]")

if __name__ == "__main__":
    main()
